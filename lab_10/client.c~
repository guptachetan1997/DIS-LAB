// Client process for 2 phase commit
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netdb.h>
#include <time.h>

#define MAXLINE 1024
#define MAX_PROCESS 5

struct Message
{
	char type; // V -> Vote Request, c -> Commit OK, a -> Commit Abort, C -> Global commit, A -> Global abort
};

int create_connection(int PORT)
{
    int sockfd;
	struct sockaddr_in servaddr;
	if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
	}
	int optval = 1;
  	setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&optval , sizeof(int));
	memset(&servaddr, 0, sizeof(servaddr));
	servaddr.sin_family    = AF_INET; // IPv4
	servaddr.sin_addr.s_addr = INADDR_ANY;
	servaddr.sin_port = htons(PORT);
	if ( bind(sockfd, (const struct sockaddr *)&servaddr,
			sizeof(servaddr)) < 0 )
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
    return sockfd;
}

void send_message(int dest_port, int sockfd, struct Message newMsg)
{
	struct sockaddr_in client_addr;
	memset(&client_addr, 0, sizeof(client_addr));
	client_addr.sin_family    = AF_INET; // IPv4
	client_addr.sin_addr.s_addr = INADDR_ANY;
	client_addr.sin_port = htons(dest_port);
    sendto(sockfd, (struct Message*)&newMsg, (1024+sizeof(newMsg)), 0, (struct sockaddr *) &client_addr, sizeof(client_addr));
}

int main(int argc, char* argv[]) {
    srand ( time(NULL) );
	int MY_PORT= atoi(argv[1]);
	int COORDINATOR_PORT= atoi(argv[2]);
	double random_number = (double)rand() / (double)((unsigned)RAND_MAX + 1);
	char my_status = (random_number >= 0.6 ? 'a' : 'c');
    struct Message * temp = malloc(sizeof(struct Message));

	printf("Initialising the client at port %d\n", MY_PORT);
    int sockfd = create_connection(MY_PORT);

    struct sockaddr_in recv_client_addr, send_client_addr;
    int len=sizeof(struct sockaddr_in), n, i, flag=1;

    while(1){
        n = recvfrom(sockfd, temp, sizeof(*temp), MSG_WAITALL, ( struct sockaddr *) &recv_client_addr, &len);
        struct Message newMsg;
        if(temp->type == 'V')
        {
            printf("COORDINATOR sent a VOTE REQUEST.");
            newMsg.type = my_status;
            printf("Local status : %s\n", (random_number >= 0.6 ? "abort" : "commit"));
            send_message(COORDINATOR_PORT, sockfd, newMsg);
        }
        else if(temp->type == 'C')
        {
            printf("COORDINATOR sent a GLOBAL COMMIT.\n");
        }
        else if(temp->type == 'A')
        {
            printf("COORDINATOR sent a GLOBAL ABORT.\n");
        }
    }
}
